// import { getAuthenticatedUserApi } from "@/clientApi/auth";
// import { LS_AUTH_JWT } from "@/constants";
import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

const initialState = {
  user: {
    _id: "",
    username: "",
    email: "",
  },
  error: null,
  status: "idle",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const incrementAsync = createAsyncThunk(
//   'connect/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount)
//     // The value we return becomes the `fulfilled` action payload
//     return response.data
//   }
// )

export const authenticate = createAsyncThunk("user/authenticate", async () => {
  // let user = await getAuthenticatedUserApi();
  return {  };
});

export const userSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // loggedIn: {
    //     reducer(state: IUserState, action: any) {
    //       state.user = action.payload;
    //     },
    //     prepare(user: IUser) {
    //       return {
    //         payload: user,
    //       };
    //     },
    //   },
    logOut: (state) => {
      state.user = initialState.user;
      state.error = null;
      state.status = "unauthenticated";
    },
  
    },

    // increment: (state) => {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    //   state.value += 1
    // },
    // decrement: (state) => {
    //   state.value -= 1
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    //     incrementByAmount: (state, action: PayloadAction<number>) => {
    //       state.value += action.payload
    //     },
    //   },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
 // },
  // extraReducers: (builder) => {
  //   // GET AUTHENTICATED USER
  //   builder.addCase(authenticate.fulfilled, (state, action) => {
  //     state.user = action.payload.user;
  //     state.status = "authenticated";
  //   });
  //   builder.addCase(authenticate.rejected, (state, action) => {
  //     state.status = "failed";
  //     state.error = action.error.message;
  //     localStorage.removeItem(LS_AUTH_JWT);
  //   });
  //   builder.addCase(authenticate.pending, (state, action) => {
  //     state.status = "loading";
  //   });
  // },
});

export const { logOut } = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.connect.value)`
//export const selectCount = (state: AppState) => state.connect.value

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState())
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default userSlice.reducer;
